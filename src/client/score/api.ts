/* tslint:disable */
/* eslint-disable */
/**
 * NBA v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    GameID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    Season?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    SeasonType?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    Status?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    Day?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    DateTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    AwayTeam?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    HomeTeam?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    AwayTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    HomeTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    StadiumID?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    Channel?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    Attendance?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    AwayTeamScore?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    HomeTeamScore?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    Updated?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    Quarter?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    TimeRemainingMinutes?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    TimeRemainingSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    PointSpread?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    OverUnder?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    AwayTeamMoneyLine?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    HomeTeamMoneyLine?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    GlobalGameID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    GlobalAwayTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    GlobalHomeTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    PointSpreadAwayTeamMoneyLine?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    PointSpreadHomeTeamMoneyLine?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    LastPlay?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    IsClosed?: boolean;
    /**
     * 
     * @type {Array<Quarter>}
     * @memberof Game
     */
    Quarters?: Array<Quarter>;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    GameEndDateTime?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    HomeRotationNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    AwayRotationNumber?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    NeutralVenue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    OverPayout?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    UnderPayout?: number;
}
/**
 * 
 * @export
 * @interface News
 */
export interface News {
    /**
     * 
     * @type {number}
     * @memberof News
     */
    NewsID?: number;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Source?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Updated?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    TimeAgo?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Title?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Content?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Url?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    TermsOfUse?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Author?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Categories?: string;
    /**
     * 
     * @type {number}
     * @memberof News
     */
    PlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof News
     */
    TeamID?: number;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Team?: string;
    /**
     * 
     * @type {number}
     * @memberof News
     */
    PlayerID2?: number;
    /**
     * 
     * @type {number}
     * @memberof News
     */
    TeamID2?: number;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    Team2?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    OriginalSource?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    OriginalSourceUrl?: string;
}
/**
 * 
 * @export
 * @interface OpponentSeason
 */
export interface OpponentSeason {
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    StatID?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    SeasonType?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Season?: number;
    /**
     * 
     * @type {string}
     * @memberof OpponentSeason
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof OpponentSeason
     */
    Team?: string;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Wins?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Losses?: number;
    /**
     * 
     * @type {string}
     * @memberof OpponentSeason
     */
    OpponentPosition?: string;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Possessions?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {OpponentSeason}
     * @memberof OpponentSeason
     */
    OpponentStat?: OpponentSeason;
    /**
     * 
     * @type {string}
     * @memberof OpponentSeason
     */
    Updated?: string;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Games?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FantasyPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FieldGoalsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FieldGoalsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    EffectiveFieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TwoPointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TwoPointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TwoPointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    ThreePointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    ThreePointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    ThreePointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FreeThrowsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FreeThrowsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FreeThrowsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    OffensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    DefensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Rebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    OffensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    DefensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TotalReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Assists?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Steals?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    BlockedShots?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Turnovers?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    PersonalFouls?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    Points?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TrueShootingAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TrueShootingPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    PlayerEfficiencyRating?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    AssistsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    StealsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    BlocksPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TurnOversPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    UsageRatePercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FantasyPointsFanDuel?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FantasyPointsDraftKings?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FantasyPointsYahoo?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    PlusMinus?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    DoubleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    TripleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof OpponentSeason
     */
    FantasyPointsFantasyDraft?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OpponentSeason
     */
    IsClosed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpponentSeason
     */
    LineupConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OpponentSeason
     */
    LineupStatus?: string;
}
/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    PlayerID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    SportsDataID?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    Status?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    TeamID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    Team?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    Jersey?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    PositionCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    Position?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    FirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    LastName?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    Height?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    Weight?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    BirthDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    BirthCity?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    BirthState?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    BirthCountry?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    HighSchool?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    College?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    Salary?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    PhotoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    Experience?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    SportRadarPlayerID?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    RotoworldPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    RotoWirePlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    FantasyAlarmPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    StatsPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    SportsDirectPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    XmlTeamPlayerID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    InjuryStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    InjuryBodyPart?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    InjuryStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    InjuryNotes?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    FanDuelPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    DraftKingsPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    YahooPlayerID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    FanDuelName?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    DraftKingsName?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    YahooName?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    DepthChartPosition?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    DepthChartOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    FantasyDraftName?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    FantasyDraftPlayerID?: number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    UsaTodayPlayerID?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    UsaTodayHeadshotUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    UsaTodayHeadshotNoBackgroundUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    UsaTodayHeadshotUpdated?: string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    UsaTodayHeadshotNoBackgroundUpdated?: string;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    NbaDotComPlayerID?: number;
}
/**
 * 
 * @export
 * @interface Quarter
 */
export interface Quarter {
    /**
     * 
     * @type {number}
     * @memberof Quarter
     */
    QuarterID?: number;
    /**
     * 
     * @type {number}
     * @memberof Quarter
     */
    GameID?: number;
    /**
     * 
     * @type {number}
     * @memberof Quarter
     */
    Number?: number;
    /**
     * 
     * @type {string}
     * @memberof Quarter
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof Quarter
     */
    AwayScore?: number;
    /**
     * 
     * @type {number}
     * @memberof Quarter
     */
    HomeScore?: number;
}
/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    Season?: number;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    StartYear?: number;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    EndYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    Description?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    RegularSeasonStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    PostSeasonStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    SeasonType?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    ApiSeason?: string;
}
/**
 * 
 * @export
 * @interface Stadium
 */
export interface Stadium {
    /**
     * 
     * @type {number}
     * @memberof Stadium
     */
    StadiumID?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Stadium
     */
    Active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    Address?: string;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    City?: string;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    State?: string;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    Zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Stadium
     */
    Country?: string;
    /**
     * 
     * @type {number}
     * @memberof Stadium
     */
    Capacity?: number;
    /**
     * 
     * @type {number}
     * @memberof Stadium
     */
    GeoLat?: number;
    /**
     * 
     * @type {number}
     * @memberof Stadium
     */
    GeoLong?: number;
}
/**
 * 
 * @export
 * @interface Standing
 */
export interface Standing {
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    Season?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    SeasonType?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    TeamID?: number;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    Key?: string;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    City?: string;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    Conference?: string;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    Division?: string;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    Wins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    Losses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    Percentage?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    ConferenceWins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    ConferenceLosses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    DivisionWins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    DivisionLosses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    HomeWins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    HomeLosses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    AwayWins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    AwayLosses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    LastTenWins?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    LastTenLosses?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    PointsPerGameFor?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    PointsPerGameAgainst?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    Streak?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    GamesBack?: number;
    /**
     * 
     * @type {string}
     * @memberof Standing
     */
    StreakDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    ConferenceRank?: number;
    /**
     * 
     * @type {number}
     * @memberof Standing
     */
    DivisionRank?: number;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    TeamID?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    Key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    Active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    City?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    Name?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    LeagueID?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    StadiumID?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    Conference?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    Division?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    PrimaryColor?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    SecondaryColor?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    TertiaryColor?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    QuaternaryColor?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    WikipediaLogoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    WikipediaWordMarkUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    NbaDotComTeamID?: number;
}
/**
 * 
 * @export
 * @interface TeamGame
 */
export interface TeamGame {
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    StatID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    SeasonType?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Season?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    Team?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Wins?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Losses?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Possessions?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    GameID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    OpponentID?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    Opponent?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    Day?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    DateTime?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    HomeOrAway?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamGame
     */
    IsGameOver?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    GlobalGameID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    GlobalOpponentID?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    Updated?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Games?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FantasyPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FieldGoalsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FieldGoalsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    EffectiveFieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TwoPointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TwoPointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TwoPointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    ThreePointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    ThreePointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    ThreePointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FreeThrowsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FreeThrowsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FreeThrowsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    OffensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    DefensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Rebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    OffensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    DefensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TotalReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Assists?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Steals?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    BlockedShots?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Turnovers?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    PersonalFouls?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    Points?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TrueShootingAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TrueShootingPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    PlayerEfficiencyRating?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    AssistsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    StealsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    BlocksPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TurnOversPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    UsageRatePercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FantasyPointsFanDuel?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FantasyPointsDraftKings?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FantasyPointsYahoo?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    PlusMinus?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    DoubleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    TripleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamGame
     */
    FantasyPointsFantasyDraft?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TeamGame
     */
    IsClosed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamGame
     */
    LineupConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeamGame
     */
    LineupStatus?: string;
}
/**
 * 
 * @export
 * @interface TeamSeason
 */
export interface TeamSeason {
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    StatID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TeamID?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    SeasonType?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Season?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamSeason
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamSeason
     */
    Team?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Wins?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Losses?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamSeason
     */
    OpponentPosition?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Possessions?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    GlobalTeamID?: number;
    /**
     * 
     * @type {OpponentSeason}
     * @memberof TeamSeason
     */
    OpponentStat?: OpponentSeason;
    /**
     * 
     * @type {string}
     * @memberof TeamSeason
     */
    Updated?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Games?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FantasyPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FieldGoalsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FieldGoalsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    EffectiveFieldGoalsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TwoPointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TwoPointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TwoPointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    ThreePointersMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    ThreePointersAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    ThreePointersPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FreeThrowsMade?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FreeThrowsAttempted?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FreeThrowsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    OffensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    DefensiveRebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Rebounds?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    OffensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    DefensiveReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TotalReboundsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Assists?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Steals?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    BlockedShots?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Turnovers?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    PersonalFouls?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    Points?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TrueShootingAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TrueShootingPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    PlayerEfficiencyRating?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    AssistsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    StealsPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    BlocksPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TurnOversPercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    UsageRatePercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FantasyPointsFanDuel?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FantasyPointsDraftKings?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FantasyPointsYahoo?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    PlusMinus?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    DoubleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    TripleDoubles?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamSeason
     */
    FantasyPointsFantasyDraft?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TeamSeason
     */
    IsClosed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamSeason
     */
    LineupConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeamSeason
     */
    LineupStatus?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
         * @summary Are Games In Progress
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areGamesInProgress: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('areGamesInProgress', 'format', format)
            const localVarPath = `/{format}/AreAnyGamesInProgress`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Current Season
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentSeason: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('currentSeason', 'format', format)
            const localVarPath = `/{format}/CurrentSeason`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Games by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesByDate: async (format: 'XML' | 'JSON', date: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('gamesByDate', 'format', format)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('gamesByDate', 'date', date)
            const localVarPath = `/{format}/GamesByDate/{date}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary News
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        news: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('news', 'format', format)
            const localVarPath = `/{format}/News`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary News by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the news. &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsByDate: async (format: 'XML' | 'JSON', date: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('newsByDate', 'format', format)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('newsByDate', 'date', date)
            const localVarPath = `/{format}/NewsByDate/{date}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary News by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;10000507&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsByPlayer: async (format: 'XML' | 'JSON', playerid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('newsByPlayer', 'format', format)
            // verify required parameter 'playerid' is not null or undefined
            assertParamExists('newsByPlayer', 'playerid', playerid)
            const localVarPath = `/{format}/NewsByPlayerID/{playerid}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"playerid"}}`, encodeURIComponent(String(playerid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Player Details by Active
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByActive: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('playerDetailsByActive', 'format', format)
            const localVarPath = `/{format}/Players`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Player Details by Free Agent
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByFreeAgent: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('playerDetailsByFreeAgent', 'format', format)
            const localVarPath = `/{format}/FreeAgents`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Player Details by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;20000571&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByPlayer: async (format: 'XML' | 'JSON', playerid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('playerDetailsByPlayer', 'format', format)
            // verify required parameter 'playerid' is not null or undefined
            assertParamExists('playerDetailsByPlayer', 'playerid', playerid)
            const localVarPath = `/{format}/Player/{playerid}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"playerid"}}`, encodeURIComponent(String(playerid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Schedules
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season (with optional season type).&lt;br&gt;Examples: &lt;code&gt;2018&lt;/code&gt;, &lt;code&gt;2018PRE&lt;/code&gt;, &lt;code&gt;2018POST&lt;/code&gt;, &lt;code&gt;2018STAR&lt;/code&gt;, &lt;code&gt;2019&lt;/code&gt;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedules: async (format: 'XML' | 'JSON', season: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('schedules', 'format', format)
            // verify required parameter 'season' is not null or undefined
            assertParamExists('schedules', 'season', season)
            const localVarPath = `/{format}/Games/{season}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"season"}}`, encodeURIComponent(String(season)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stadiums
         * @param {'xml' | 'json'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stadiums: async (format: 'xml' | 'json', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('stadiums', 'format', format)
            const localVarPath = `/{format}/Stadiums`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Standings
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standings: async (format: 'XML' | 'JSON', season: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('standings', 'format', format)
            // verify required parameter 'season' is not null or undefined
            assertParamExists('standings', 'season', season)
            const localVarPath = `/{format}/Standings/{season}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"season"}}`, encodeURIComponent(String(season)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Team Game Stats by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGameStatsByDate: async (format: 'XML' | 'JSON', date: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('teamGameStatsByDate', 'format', format)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('teamGameStatsByDate', 'date', date)
            const localVarPath = `/{format}/TeamGameStatsByDate/{date}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Team Season Stats
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamSeasonStats: async (format: 'XML' | 'JSON', season: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('teamSeasonStats', 'format', format)
            // verify required parameter 'season' is not null or undefined
            assertParamExists('teamSeasonStats', 'season', season)
            const localVarPath = `/{format}/TeamSeasonStats/{season}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"season"}}`, encodeURIComponent(String(season)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Teams (Active)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsActive: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('teamsActive', 'format', format)
            const localVarPath = `/{format}/teams`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Teams (All)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsAll: async (format: 'XML' | 'JSON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('teamsAll', 'format', format)
            const localVarPath = `/{format}/AllTeams`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
         * @summary Are Games In Progress
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async areGamesInProgress(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.areGamesInProgress(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Current Season
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentSeason(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentSeason(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Games by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesByDate(format: 'XML' | 'JSON', date: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Game>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesByDate(format, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary News
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async news(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<News>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.news(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary News by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the news. &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsByDate(format: 'XML' | 'JSON', date: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<News>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsByDate(format, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary News by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;10000507&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<News>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsByPlayer(format, playerid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Player Details by Active
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playerDetailsByActive(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Player>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playerDetailsByActive(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Player Details by Free Agent
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playerDetailsByFreeAgent(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Player>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playerDetailsByFreeAgent(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Player Details by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;20000571&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playerDetailsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playerDetailsByPlayer(format, playerid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Schedules
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season (with optional season type).&lt;br&gt;Examples: &lt;code&gt;2018&lt;/code&gt;, &lt;code&gt;2018PRE&lt;/code&gt;, &lt;code&gt;2018POST&lt;/code&gt;, &lt;code&gt;2018STAR&lt;/code&gt;, &lt;code&gt;2019&lt;/code&gt;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedules(format: 'XML' | 'JSON', season: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Game>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedules(format, season, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stadiums
         * @param {'xml' | 'json'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stadiums(format: 'xml' | 'json', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Stadium>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stadiums(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Standings
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standings(format: 'XML' | 'JSON', season: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Standing>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standings(format, season, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Team Game Stats by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamGameStatsByDate(format: 'XML' | 'JSON', date: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamGame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamGameStatsByDate(format, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Team Season Stats
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamSeasonStats(format: 'XML' | 'JSON', season: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamSeason>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamSeasonStats(format, season, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Teams (Active)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsActive(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsActive(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Teams (All)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsAll(format: 'XML' | 'JSON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsAll(format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
         * @summary Are Games In Progress
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areGamesInProgress(format: 'XML' | 'JSON', options?: any): AxiosPromise<boolean> {
            return localVarFp.areGamesInProgress(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Current Season
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentSeason(format: 'XML' | 'JSON', options?: any): AxiosPromise<Season> {
            return localVarFp.currentSeason(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Games by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesByDate(format: 'XML' | 'JSON', date: string, options?: any): AxiosPromise<Array<Game>> {
            return localVarFp.gamesByDate(format, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary News
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        news(format: 'XML' | 'JSON', options?: any): AxiosPromise<Array<News>> {
            return localVarFp.news(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary News by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the news. &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsByDate(format: 'XML' | 'JSON', date: string, options?: any): AxiosPromise<Array<News>> {
            return localVarFp.newsByDate(format, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary News by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;10000507&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any): AxiosPromise<Array<News>> {
            return localVarFp.newsByPlayer(format, playerid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Player Details by Active
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByActive(format: 'XML' | 'JSON', options?: any): AxiosPromise<Array<Player>> {
            return localVarFp.playerDetailsByActive(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Player Details by Free Agent
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByFreeAgent(format: 'XML' | 'JSON', options?: any): AxiosPromise<Array<Player>> {
            return localVarFp.playerDetailsByFreeAgent(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Player Details by Player
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;20000571&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerDetailsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any): AxiosPromise<Player> {
            return localVarFp.playerDetailsByPlayer(format, playerid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Schedules
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season (with optional season type).&lt;br&gt;Examples: &lt;code&gt;2018&lt;/code&gt;, &lt;code&gt;2018PRE&lt;/code&gt;, &lt;code&gt;2018POST&lt;/code&gt;, &lt;code&gt;2018STAR&lt;/code&gt;, &lt;code&gt;2019&lt;/code&gt;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedules(format: 'XML' | 'JSON', season: string, options?: any): AxiosPromise<Array<Game>> {
            return localVarFp.schedules(format, season, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stadiums
         * @param {'xml' | 'json'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stadiums(format: 'xml' | 'json', options?: any): AxiosPromise<Array<Stadium>> {
            return localVarFp.stadiums(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Standings
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standings(format: 'XML' | 'JSON', season: string, options?: any): AxiosPromise<Array<Standing>> {
            return localVarFp.standings(format, season, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Team Game Stats by Date
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGameStatsByDate(format: 'XML' | 'JSON', date: string, options?: any): AxiosPromise<Array<TeamGame>> {
            return localVarFp.teamGameStatsByDate(format, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Team Season Stats
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamSeasonStats(format: 'XML' | 'JSON', season: string, options?: any): AxiosPromise<Array<TeamSeason>> {
            return localVarFp.teamSeasonStats(format, season, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Teams (Active)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsActive(format: 'XML' | 'JSON', options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.teamsActive(format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Teams (All)
         * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsAll(format: 'XML' | 'JSON', options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.teamsAll(format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * @summary Are Games In Progress
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public areGamesInProgress(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).areGamesInProgress(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Current Season
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public currentSeason(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).currentSeason(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Games by Date
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gamesByDate(format: 'XML' | 'JSON', date: string, options?: any) {
        return DefaultApiFp(this.configuration).gamesByDate(format, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary News
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public news(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).news(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary News by Date
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} date The date of the news. &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newsByDate(format: 'XML' | 'JSON', date: string, options?: any) {
        return DefaultApiFp(this.configuration).newsByDate(format, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary News by Player
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;10000507&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any) {
        return DefaultApiFp(this.configuration).newsByPlayer(format, playerid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Player Details by Active
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playerDetailsByActive(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).playerDetailsByActive(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Player Details by Free Agent
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playerDetailsByFreeAgent(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).playerDetailsByFreeAgent(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Player Details by Player
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} playerid Unique FantasyData Player ID. Example:&lt;code&gt;20000571&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playerDetailsByPlayer(format: 'XML' | 'JSON', playerid: string, options?: any) {
        return DefaultApiFp(this.configuration).playerDetailsByPlayer(format, playerid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Schedules
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} season Year of the season (with optional season type).&lt;br&gt;Examples: &lt;code&gt;2018&lt;/code&gt;, &lt;code&gt;2018PRE&lt;/code&gt;, &lt;code&gt;2018POST&lt;/code&gt;, &lt;code&gt;2018STAR&lt;/code&gt;, &lt;code&gt;2019&lt;/code&gt;, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public schedules(format: 'XML' | 'JSON', season: string, options?: any) {
        return DefaultApiFp(this.configuration).schedules(format, season, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stadiums
     * @param {'xml' | 'json'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stadiums(format: 'xml' | 'json', options?: any) {
        return DefaultApiFp(this.configuration).stadiums(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Standings
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public standings(format: 'XML' | 'JSON', season: string, options?: any) {
        return DefaultApiFp(this.configuration).standings(format, season, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Team Game Stats by Date
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} date The date of the game(s). &lt;br&gt;Examples: &lt;code&gt;2015-JUL-31&lt;/code&gt;, &lt;code&gt;2015-SEP-01&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teamGameStatsByDate(format: 'XML' | 'JSON', date: string, options?: any) {
        return DefaultApiFp(this.configuration).teamGameStatsByDate(format, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Team Season Stats
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {string} season Year of the season. &lt;br&gt;Examples: &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2016&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teamSeasonStats(format: 'XML' | 'JSON', season: string, options?: any) {
        return DefaultApiFp(this.configuration).teamSeasonStats(format, season, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Teams (Active)
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teamsActive(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).teamsActive(format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Teams (All)
     * @param {'XML' | 'JSON'} format Desired response format. Valid entries are &lt;code&gt;XML&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public teamsAll(format: 'XML' | 'JSON', options?: any) {
        return DefaultApiFp(this.configuration).teamsAll(format, options).then((request) => request(this.axios, this.basePath));
    }
}


